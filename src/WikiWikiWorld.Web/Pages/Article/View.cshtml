@page
@model ViewModel
@{
	ViewData["Title"] = Model.DisplayedRevision?.DisplayTitle ?? Model.DisplayedRevision?.Title ?? "Article Not Found";

	bool IsPriorRevision = Model.Revision is not null && Model.DisplayedRevision?.DateCreated != Model.CurrentRevision?.DateCreated;
	bool HasTitleChanged = IsPriorRevision && Model.DisplayedRevision?.Title != Model.CurrentRevision?.Title;
	bool HasUrlSlugChanged = IsPriorRevision && Model.UrlSlug != Model.CurrentRevision?.UrlSlug;
	Model.AllowSearchEngineIndexingOfPage = !IsPriorRevision;
}
<style>








</style>

@* <div class="image-wrapper">
	<img class="topp" src="/sitefiles/test-header.png" />
</div> *@

<figure>
	@if(!string.IsNullOrWhiteSpace(Model.HeaderImage))
	{
		<img src="@Model.HeaderImage" alt="..." class="hero-image" />
	}
	<h1>@Html.Raw(string.IsNullOrWhiteSpace(Model.DisplayedRevision?.DisplayTitle) ? Model.DisplayedRevision?.Title : Model.DisplayedRevision?.DisplayTitle.Replace("\n", "<br>"))</h1>
</figure>







@* <h1 class="title">@Model.DisplayedRevision?.Title</h1> *@




@* 			<img class="topp" src="/sitefiles/test-header.png" />
 *@

@if (Model.IsViewingCurrentRevision && Model.Revision is not null)
{
	<div class="alert alert-info">
		<strong>You are viewing the current revision of this article.</strong><br>
		To see the canonical URL, visit:
		<a href="/@Model.CurrentRevision?.UrlSlug" class="btn btn-sm btn-primary">Go to Latest Version</a>
	</div>
}

@if (IsPriorRevision && Model.DisplayedRevision is not null && Model.CurrentRevision is not null)
{
	<div class="alert alert-warning">
		<strong>You're viewing a prior revision.</strong><br>
		This revision was published on <strong>@Model.DisplayedRevision.DateCreated.ToString("dd MMMM yyyy HH:mm")</strong>.<br>
		The current version was published on <strong>@Model.CurrentRevision.DateCreated.ToString("dd MMMM yyyy HH:mm")</strong>.
		<a href="/@Model.CurrentRevision.UrlSlug" class="btn btn-sm btn-primary">View Current</a>

		@if (HasTitleChanged)
		{
			<p class="text-danger">
				<strong>Note:</strong> The title of this article has changed from
				"<strong>@Model.DisplayedRevision.Title</strong>" to
				"<strong>@Model.CurrentRevision.Title</strong>".
			</p>
		}

		@if (HasUrlSlugChanged)
		{
			<p class="text-danger">
				<strong>Note:</strong> The URL of this article has changed from
				"<strong>@Model.UrlSlug</strong>" to
				"<strong>@Model.CurrentRevision.UrlSlug</strong>".<br>
				<a href="/@Model.CurrentRevision.UrlSlug" class="btn btn-sm btn-secondary">Go to New URL</a>
			</p>
		}
	</div>
}
else if(Model.DisplayedRevision is not null)
{
	<div class="editor-info">
		<span class="label"><small>@(Model.RecentAuthors.Count == 1 ? "Created by" : "Improved by")</small></span>
		<address class="author-list">
			@for (int i = 0; i < Model.RecentAuthors.Count; i++)
			{
				<a href="/@Model.RecentAuthors[i].UserName" class="avatar" title="@Model.RecentAuthors[i].UserName" style="z-index: @(Model.RecentAuthors.Count - i);">
					<img src="@($"/sitefiles/{Model.SiteId}/profilepics/{Model.RecentAuthors[i].ProfilePicGuid}.png")" alt="@Model.RecentAuthors[i].UserName" />
				</a>
			}

		</address>
		<span class="last-updated">
			<small>
				@WikiWikiWorld.Web.Helpers.TimeAgo.GetDetailedTimeAgoString(DateTimeOffset.UtcNow, Model.DisplayedRevision.DateCreated)
			</small>
		</span>
		<div class="dropdown">
			<button class="dropbtn">⋮</button>
			<div class="dropdown-content">
				<a href="@Model.UrlSlug/edit" rel="nofollow">Edit Article</a>
				<a href="#">View Edit History</a>
				<a href="#">Delete Article</a>
				<a href="#">Watch Article</a>
				<a href="#">Report Article</a>
			</div>
		</div>
	</div>
}

<article>


	<script>
		document.addEventListener("DOMContentLoaded", function() {
		const videoContainers = document.querySelectorAll('.video-container');

		videoContainers.forEach(container => {
		container.addEventListener('click', function() {
		const videoId = container.getAttribute('data-id');

		// Preserve the container's height to prevent layout collapse
		const containerHeight = container.clientHeight;
		container.style.height = containerHeight + 'px';

		// Get the thumbnail image and play button for removal later.
		const thumbnail = container.querySelector('img');
		const playButton = container.querySelector('.play-button');

		// Create the YouTube iframe.
		const iframe = document.createElement('iframe');
		iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
		iframe.setAttribute('frameborder', '0');
		iframe.setAttribute('allowfullscreen', '');
		iframe.setAttribute('allow', 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture');

		// Set the iframe to fill the container and overlay the thumbnail.
		iframe.style.width = '100%';
		iframe.style.height = '100%';
		iframe.style.position = 'absolute';
		iframe.style.top = '0';
		iframe.style.left = '0';

		// Append the iframe to the container (it will overlay the thumbnail).
		container.appendChild(iframe);

		let removed = false;
		// Remove the thumbnail and play button once the iframe fully loads.
		iframe.onload = function() {
		if (!removed) {
		if (thumbnail) thumbnail.remove();
		if (playButton) playButton.remove();
		removed = true;
		}
		};

		// Fallback removal after 3 seconds in case onload doesn't fire.
		setTimeout(function() {
		if (!removed) {
		if (thumbnail) thumbnail.remove();
		if (playButton) playButton.remove();
		}
		}, 3000);
		});
		});
		});
	</script>







	@if (Model.DisplayedRevision is not null)
	{

		@Html.Raw(Model.ArticleRevisionHtml)


		@if(IsPriorRevision)
		{
			<p>
				<small>
					Published on: @Model.DisplayedRevision.DateCreated.ToString("dd MMMM yyyy HH:mm")
				</small>
			</p>
		}


	}
	else
	{
		<p>Article not found.</p>
	}
</article>
